1.XMLHttpRequest
	
	function createXhr(){
		if(window.XMLHttpRequest){
			return new XMLHttpRequest();
		}else{
			return new ActiveXObject("Microsoft.XMLHTTP");
		}
	}

2.xhr的成员
	1.方法 - open()
		作用:创建请求
		语法:xhr.open(method,url,async);
			method:请求方式,取值'get' 或 'post'
			url:请求地址,字符串
			async:是否采用异步的方式进行提交
				true:异步
				false:同步
			示例:以异步的提交方式使用get请求方法向/01-server的地址发送请求
				xhr.open('get','/01-server',true);
	2.属性 - readyState
		作用:表示xhr的请求状态。通过不同的状态值来表示xhr与服务器的交互情况
			0 : 请求尚未初始化
			1 : 已经与服务器建立连接
			2 : 服务器端已接收请求
			3 : 请求正在处理中
			4 : 响应已完成
	3.属性 - status
		作用:服务器端的响应状态码
			200:表示服务器端正确处理所有的请求并给出响应
			404:请求资源不存在
			500:服务器端内部错误
	4.事件 - onreadystatechange
		作用:每当xhr的readyState值发生改变的时候都要自动触发的一个事件 - 回调函数
			只有当readyState的值为4并且status的值为200的时候则可以正常的接收响应数据了
		示例:
			xhr.onreadystatechange = function(){
				if(xhr.readyState==4 && xhr.status==200){
					正常的接收响应回来的内容了
					var resTxt = xhr.responseText;
					//resTxt表示的就是响应回来的数据
				}
			}
	5.属性 - responseText
		作用:响应数据
	6.方法 - send()
		作用:通知xhr向服务器端发送请求
		语法: xhr.send(body)
			body:请求体
			get请求的话:body的值为null	
				xhr.send(null)
			post请求的话:body的值则为要提交的数据
				xhr.send("请求数据")
3.AJAX 发送POST请求
	1.请求数据需要放在 send() 
		xhr.send("参数名1=值&参数名2=值2");
	2.将Content-Type的值改为application/x-www-form-urlencoded
		xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
4.JSON
	1.JSO
		JavaScript Object
		JS对象的表示方式:
			1.使用 {} 表示一个对象
			2.在{}中，使用key:value的格式来表示数据
			3.如果value是字符串的话需要用引号引起来
		示例:表示一个用户的信息(uname,uage,ugender)
			var user = {
				uname : "TeacherQi",
				uage : 28,
				ugender : "Male"
			};
	2.JSON
		JavaScript Object Notation
		采用JS对象的格式所描述出来的字符串




Content-Type:application/x-www-form-urlencoded