	git 的操作

		1、安装  linux 	
					sudo apt-get install git 

		2、git的配置
			配置工具： git config

			配置级别：
			1.系统中所有用户都使用  /etc/gitconfig  文件
				git config --system user.email  [yourname]

			2.作用于当前用户
				~/.git config 文件
				git config --global user.name  [yourname]

			3.作用于当前项目仓库
				.git/config 文件
				git config core.editor [youreditor]

		3、查看配置信息
			git config --list
			cd Desktop/   去桌面
			mkdir file    创建文件夹
			git init   就初始化仓库了，相当于仓库建成功了
			touch sdvd.text 创建文本
			rm flie 删除文件




		4、git 命令
			查看命令
			 	git
			初始化git仓库
				git init
			将需要的git管理代码写在git仓库（目录）中
			查看分支状态 git status
				默认在gitd的主分支master上

				将文件提交到暂存区
				git add  file1,file2....

				删除暂存区中的文件
				git rm --cached file1

				恢复文件
				git checkout file

				将暂存区内容保存提交
				git commit  -m "提示信息"

				git log    查看提交日志

				echo " 内容 "  添加内容

				查看当前文件和已经提交内容的差别
				git diff file

				mkdir 文件夹   创建文夹

				文件的移动删除
				git mv  test/file.config .

				操作后 需要commit操作才真正让git和当前文件夹一致

				版本控制
						回到上一个版本
				git reset  --hard HEAD^
				 回到上一个版本用一个 ^  回到上两个版本就两个 ^^

				 超过10 就 HEAD~10   11个HEAD~11

				 	回到上一个版本
				 	git log    查看提交日志 commit_id  复制前7个版本号
				 	git reset  --hard  [上一个版本的前7个版本号]

				 	回到新的版本
				 		当退回到某个版本后，比其新的版本log就无法通过 git log 查看，此时使用 git reflog 查看，然后通过 git reset --hard 去往指定版本
				 		git reflog

				 	放弃工作内容修改
				 	git checkout -- file


			创建临时保存工作区
				内容暂时不想提交  （没有commit的情况下，如果已经commit就没意义了）
				git stash


				查看现有保存的工作区
				git stash list 

				恢复到某个工作区
				gtt  stash apply stash@{number}

				恢复并删除上一个工作区
				git stash pop 


				清除所有的工作区
				git stash clear 
				git stash list

		5、分支操作
			分支概念：分支即每个人可以获取代码，在此基础上创建自己的分支单独开发，不用考虑别人代码的使用情况。开发完成后再将自己的分支合并到主线。

			优点：
				安全，不影响其他人工作，自己控制进度。

				查看当前分支
					git branch  
				创建分支
					git branch 分支名
				注意：前面有*的表示当前正在工作的分支  默认为master

				切换工作分支
					git checkout 分支名

				创建并切换到新的分支
					git checkout -b  分支名

					示例：
						git checkout -b nazi.txt
						git add nazi.txt 保存到缓存区
						git commit -m "娜娜的第一次提交"
				问题：合并到主分支
					  git branch  查看分支情况
					  Nazi
					  master
					* yucq   当前所在的分支情况

					第一步：要切换到主分支上
						git checkout master

						* master 当前分支情况
					第二步：把nazi的分支合并到主分支上
						git merge Nazi   把Nazi合并到当前的分支

				删除分支（注：不在此分支上工作）
					git branch -d  分支名

				强制删除分支（没有被合并的分支不允许用-d删除）
					git branch -D  分支名

				查看分支合并图 
					git log --graph


		6、标签管理（类似Linux快照）
			概念：即在当前工作位置增加快照，保存工作状态。一般用于重要里程碑事件后添加标签

				创建标签
					git tag 版本号
					git tag v1.0
				选择commit_id打标签
					git tag v0.9  dcedff4
				查看标签
					git tag
					查看标签的commit说明
					git show v0.9

					用-a 指定标签名    -m 添加标签信息
					git tag  -a  版本号 -m '说明信息'

				删除标签
					git tag -d 版本号
					git tag -d v0.9

				恢复到指定标签版本
				git reset --hard v1.0
		7、ssh  ip名@ip地址     密码    exit


		8、创建共享仓库
			1、创建一个文件夹
				mkdir gitrepo
			2、设置文件的用户属性
				chown 用户名：用户组 gitrepo
			3、进入文件夹，创建为git仓库
				cd  gitrepo
				git init --bare porject.git
			4、修改
			 	chown -R 用户名：用户组 project.git
			 	一般项目名称都以.git 结尾，设置该目录用户

		添加远程仓库
			git remote add origin 用户名@ip:/项目地址

			推送到远程仓库，第一必须加-u
			git push -u origin master

			获取项目代码
			连接远程共享仓库
				git remote add origin 用户名@ip:/项目地址
			将项目克隆到本地
				git clone 用户名@ip:/项目地址 
				git clone git@github.com:gyfcv-233/AID201984.git

			推送其他分支
				git push origin 分支名
			推送标签
				git push origin --tags  推送所有标签
				git push orign  v1.0 推送指定标签

		删除远程分支
			git push -u origin : 分支名

		删除标签
			git push origin --delete tag v1.0 删除指定标签


		其他获取远程仓库代码的命令


		获取新的分支和标签
		git fetch origin

		获取更新的代码
		git pull



	github 

		完整推送版
			第一步：
				cd Desktop/
			第二步：
				 cd 七夕/
				 git init
				 git add index.html
				 git commit -m "七夕代码"
				 git remote add origin git@github.com:gyfcv-233/AID201984.git (在github负责，创建远程仓库后)
				 git push -u origin master  同上
















































